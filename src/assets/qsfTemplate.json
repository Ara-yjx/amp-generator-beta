{
  "SurveyEntry": {
    "SurveyID": "SV_dnAkDKOddKsPTpQ",
    "SurveyName": "SPT",
    "SurveyDescription": null,
    "SurveyOwnerID": "UR_8qrlYLU2jfq7Cqa",
    "SurveyBrandID": "upenn",
    "DivisionID": null,
    "SurveyLanguage": "EN",
    "SurveyActiveResponseSet": "RS_6zXdxkXXWoWLKL4",
    "SurveyStatus": "Active",
    "SurveyStartDate": "0000-00-00 00:00:00",
    "SurveyExpirationDate": "0000-00-00 00:00:00",
    "SurveyCreationDate": "2023-07-08 05:22:35",
    "CreatorID": "UR_8qrlYLU2jfq7Cqa",
    "LastModified": "2024-01-06 06:37:50",
    "LastAccessed": "0000-00-00 00:00:00",
    "LastActivated": "2023-09-09 05:47:48",
    "Deleted": null
  },
  "SurveyElements": [
    {
      "SurveyID": "SV_dnAkDKOddKsPTpQ",
      "Element": "BL",
      "PrimaryAttribute": "Survey Blocks",
      "SecondaryAttribute": null,
      "TertiaryAttribute": null,
      "Payload": [
        {
          "Type": "Default",
          "Description": "Load parameters",
          "ID": "BL_cJgbZWbXtlZwIQe",
          "BlockElements": [
            {
              "Type": "Question",
              "QuestionID": "QID1"
            }
          ]
        },
        {
          "Type": "Trash",
          "Description": "Trash \/ Unused Questions",
          "ID": "BL_3FesUeo9uvib7y6",
          "BlockElements": [],
          "Options": {
            "BlockLocking": "false",
            "RandomizeQuestions": "false",
            "BlockVisibility": "Collapsed"
          }
        },
        {
          "Type": "Standard",
          "SubType": "",
          "Description": "Run trials",
          "ID": "BL_3EDLHCLtBlrl7oO",
          "BlockElements": [
            {
              "Type": "Question",
              "QuestionID": "QID2"
            }
          ]
        }
      ]
    },
    {
      "SurveyID": "SV_dnAkDKOddKsPTpQ",
      "Element": "FL",
      "PrimaryAttribute": "Survey Flow",
      "SecondaryAttribute": null,
      "TertiaryAttribute": null,
      "Payload": {
        "Type": "Root",
        "FlowID": "FL_1",
        "Flow": [
          {
            "Type": "EmbeddedData",
            "FlowID": "FL_7",
            "EmbeddedData": [
              {
                "Description": "stimuliItems",
                "Type": "Custom",
                "Field": "stimuliItems",
                "VariableType": "String",
                "DataVisibility": [],
                "AnalyzeText": false,
                "Value": "[{\n  \"pools\": [\n    {\n      \"items\": [{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_zANlu6B1UFbcflF\",\"count\":5},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_vQzlOEGBXbnuhSn\",\"count\":5},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_XJw0GZWrbUlfyOI\",\"count\":5},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_E72k4fxbh7Zxw7e\",\"count\":5},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_RFsC6tV9IGidru4\",\"count\":5},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_M4wae3Z0GjWQRkD\",\"count\":5},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_F9fpRim5SiLGU8t\",\"count\":5},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_xLUoASyb57j7ezR\",\"count\":5}],\n      \"shuffle\": 2\n    },\n    {\n      \"items\": [{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_3jUT9yhSx8mI5wy\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_25WNyckTIXiv4bQ\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_9HRiGBCgN50xZI2\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_bqP6msi7K3SPhPM\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_8q8uD7MVCDyWdzo\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_5jy9Uo2ZV2BaPki\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_3KIqzYFkmmCv3cq\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_2lYARTfPvNPiwF8\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_8CagBSGuqa3103k\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_eXWu2juJ3IFpiia\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_9t0w55KTUPY9uK2\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_5jo1Wq1EpYoas3s\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_81blvWQpZDlael8\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_0U7PxswipvQuNrU\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_2gZtO50zqBd39B4\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_2aQYOy04gO7kx4G\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_9yt21bg0o84Tt9c\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_03srJoTDehJb2V8\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_4YIfcyT8d1xghlI\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_8qUdZ0CwAXeCKxM\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_6QCRchjKW1dGhcG\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_4HLhYK2seAX1opw\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_2gF10eQOSwdHxfo\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_8qucEPy2K0oFkWy\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_2tULPzYl2dk6eiO\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_3r3a5Z2Ruguka7s\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_3en7w39WHobUvoW\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_abX7fBDnVzvPSjc\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_dnUHxQckvLbEV4a\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_agwjmD9fGQMcawK\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_3OjfkCyc7ZmCBym\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_eP6i52QjuzksfRA\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_1HeeVDSoYiQspE2\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_7X1IdJXN98qbVhI\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_e8rwUgorjxXXSuy\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_9poogxcVq9oAkQe\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_d73fKrvvmZqxFn8\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_8ogT3ozEpraFUto\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_0roC8vKyNFfu8wS\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_bIb0xXbDx6JVL5Y\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_3QxQYuy313umdmu\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_e3F1LOHphmo0w98\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_8kwWckkggPMtpWe\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_0MoXFM69zQnFxEq\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_0pkHgkE3ck2IaOO\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_2f0J3X3u1gVwoBg\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_b88sQUZ7HZURpdQ\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_cN0xpyB0oYo4rVs\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_9vk06qTobnmwRlc\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_1ZIuviqhK3uETBA\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_ePDdYlUD7iHUx7g\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_eRJnNWh2BpJfv5c\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_0GSkjfufXlNmYpU\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_afpeLjDOMD1i3Hw\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_6Lm9B6qm4EgmO0u\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_82s7sXnHN1InklE\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_6thdUpsXpgOQefs\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_0SzgDcIaL7N8EZw\",\"count\":\"1\"},{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/ControlPanel\/Graphic.php?IM=IM_8I0kGbUUJ1U3HRI\",\"count\":\"1\"}],\n      \"shuffle\": true\n    },\n    {\n      \"items\": [{\"type\":\"image\",\"content\":\"https:\/\/upenn.co1.qualtrics.com\/CP\/Graphic.php?IM=IM_bQlal1oB5kyb60m\",\"count\":\"40\"}],\n      \"shuffle\": false\n    }\n  ],\n  \"totalTrials\": 10\n}]"
              },
              {
                "Description": "totalRounds",
                "Type": "Custom",
                "Field": "totalRounds",
                "VariableType": "String",
                "DataVisibility": [],
                "AnalyzeText": false,
                "Value": "2"
              },
              {
                "Description": "timeline",
                "Type": "Custom",
                "Field": "timeline",
                "VariableType": "String",
                "DataVisibility": [],
                "AnalyzeText": false,
                "Value": "{\n    \"durationsAndIntervals\": [[125, 100], [125, 100]],\n    \"delayBeforeKeyboard\": null,\n    \"delayAfterKeyboard\": null,\n    \"autoProceedTimeout\": 10000\n  }"
              },
              {
                "Description": "primes",
                "Type": "Custom",
                "Field": "primes",
                "VariableType": "String",
                "DataVisibility": [],
                "AnalyzeText": false,
                "Value": "[\n  { \"name\": \"learned_1\", \"pool\":1, \"include\": [1], \"overrideCount\": [20, null] },\n  { \"name\": \"control_1\", \"pool\": 1, \"include\": [1,2], \"exclude\": [\"learned_1\"], \"overrideCount\": 6 }\n]"
              },
              {
                "Description": "acceptedKeys",
                "Type": "Custom",
                "Field": "acceptedKeys",
                "VariableType": "String",
                "DataVisibility": [],
                "AnalyzeText": false,
                "Value": "d,k,Space"
              }
            ]
          },
          {
            "Type": "EmbeddedData",
            "FlowID": "FL_8",
            "EmbeddedData": [
              {
                "Description": "sptResponses",
                "Type": "Recipient",
                "Field": "sptResponses",
                "VariableType": "String",
                "DataVisibility": [],
                "AnalyzeText": false
              },
              {
                "Description": "sptResponseDurations",
                "Type": "Recipient",
                "Field": "sptResponseDurations",
                "VariableType": "String",
                "DataVisibility": [],
                "AnalyzeText": false
              },
              {
                "Description": "shuffleResult",
                "Type": "Recipient",
                "Field": "shuffleResult",
                "VariableType": "String",
                "DataVisibility": [],
                "AnalyzeText": false
              },
              {
                "Description": "primeResult",
                "Type": "Recipient",
                "Field": "primeResult",
                "VariableType": "String",
                "DataVisibility": [],
                "AnalyzeText": false
              }
            ]
          },
          {
            "Type": "Block",
            "ID": "BL_cJgbZWbXtlZwIQe",
            "FlowID": "FL_2",
            "Autofill": []
          },
          {
            "Type": "Standard",
            "ID": "BL_3EDLHCLtBlrl7oO",
            "FlowID": "FL_5",
            "Autofill": []
          }
        ],
        "Properties": {
          "Count": 8,
          "RemovedFieldsets": []
        }
      }
    },
    {
      "SurveyID": "SV_dnAkDKOddKsPTpQ",
      "Element": "PL",
      "PrimaryAttribute": "Preview Link",
      "SecondaryAttribute": null,
      "TertiaryAttribute": null,
      "Payload": {
        "PreviewType": "Brand",
        "PreviewID": "6115033c-b61a-4566-9c05-d218626bb355"
      }
    },
    {
      "SurveyID": "SV_dnAkDKOddKsPTpQ",
      "Element": "SO",
      "PrimaryAttribute": "Survey Options",
      "SecondaryAttribute": null,
      "TertiaryAttribute": null,
      "Payload": {
        "BackButton": "false",
        "SaveAndContinue": "true",
        "SurveyProtection": "PublicSurvey",
        "BallotBoxStuffingPrevention": "false",
        "NoIndex": "Yes",
        "SecureResponseFiles": "true",
        "SurveyExpiration": "None",
        "SurveyTermination": "DefaultMessage",
        "Header": "",
        "Footer": "",
        "ProgressBarDisplay": "None",
        "PartialData": "+1 week",
        "ValidationMessage": "",
        "PreviousButton": " \u2190 ",
        "NextButton": " \u2192 ",
        "SurveyTitle": "Qualtrics Survey | Qualtrics Experience Management",
        "SkinLibrary": "upenn",
        "SkinType": "templated",
        "Skin": {
          "brandingId": null,
          "templateId": "*base",
          "overrides": null
        },
        "NewScoring": 1,
        "SurveyMetaDescription": "The most powerful, simple and trusted way to gather experience data. Start your journey to experience management and try a free account today.",
        "SurveyName": "SPT",
        "CustomStyles": [],
        "ProtectSelectionIds": true
      }
    },
    {
      "SurveyID": "SV_dnAkDKOddKsPTpQ",
      "Element": "QGO",
      "PrimaryAttribute": "QGO_QuotaGroupOrder",
      "SecondaryAttribute": null,
      "TertiaryAttribute": null,
      "Payload": [
        "QG_FH8Cdf0L5gg9uBa"
      ]
    },
    {
      "SurveyID": "SV_dnAkDKOddKsPTpQ",
      "Element": "SCO",
      "PrimaryAttribute": "Scoring",
      "SecondaryAttribute": null,
      "TertiaryAttribute": null,
      "Payload": {
        "ScoringCategories": [],
        "ScoringCategoryGroups": [],
        "ScoringSummaryCategory": null,
        "ScoringSummaryAfterQuestions": 0,
        "ScoringSummaryAfterSurvey": 0,
        "DefaultScoringCategory": null,
        "AutoScoringCategory": null
      }
    },
    {
      "SurveyID": "SV_dnAkDKOddKsPTpQ",
      "Element": "PROJ",
      "PrimaryAttribute": "CORE",
      "SecondaryAttribute": null,
      "TertiaryAttribute": "1.1.0",
      "Payload": {
        "ProjectCategory": "CORE",
        "SchemaVersion": "1.1.0"
      }
    },
    {
      "SurveyID": "SV_dnAkDKOddKsPTpQ",
      "Element": "STAT",
      "PrimaryAttribute": "Survey Statistics",
      "SecondaryAttribute": null,
      "TertiaryAttribute": null,
      "Payload": {
        "MobileCompatible": true,
        "ID": "Survey Statistics"
      }
    },
    {
      "SurveyID": "SV_dnAkDKOddKsPTpQ",
      "Element": "QC",
      "PrimaryAttribute": "Survey Question Count",
      "SecondaryAttribute": "3",
      "TertiaryAttribute": null,
      "Payload": null
    },
    {
      "SurveyID": "SV_dnAkDKOddKsPTpQ",
      "Element": "SQ",
      "PrimaryAttribute": "QID2",
      "SecondaryAttribute": "d key = less pleasant : k key = more pleasant",
      "TertiaryAttribute": null,
      "Payload": {
        "QuestionText": "<div style=\"margin: 50px auto 0; width: 300px; height: 300px; display: flex; align-items: center; justify-content: center; position: relative;\">\n  <div id=\"spt-trial-text\" style=\"white-space: pre-wrap; color: #000000; font-weight: bold; font-size: 28px; line-height: 1.5em; text-align: center;\"><\/div>\n  <img id=\"spt-trial-image\" style=\"position: absolute; width: 100%; height: 100%; object-fit: contain;\"\/>\n<\/div>\n<div style=\"display: flex; justify-content: space-around; margin-top: 6em; white-space: pre-wrap; color: black; text-align: center\">d key = less pleasant        :        k key = more pleasant<\/div>",
        "DefaultChoices": false,
        "DataExportTag": "SPT",
        "QuestionType": "DB",
        "Selector": "TB",
        "Configuration": {
          "QuestionDescriptionOption": "UseText"
        },
        "QuestionDescription": "d key = less pleasant : k key = more pleasant",
        "ChoiceOrder": [],
        "Validation": {
          "Settings": {
            "Type": "None"
          }
        },
        "GradingData": [],
        "Language": [],
        "NextChoiceId": 4,
        "NextAnswerId": 1,
        "QuestionID": "QID2",
        "QuestionJS": "\/**\n * @typedef {import('.\/type.d.ts').StimuliItem} StimuliItem\n * @typedef {import('.\/type.d.ts').StimuliPrimeItem} StimuliPrimeItem\n * @typedef {import('.\/type.d.ts').StimuliPoolConfig} StimuliPoolConfig\n * @typedef {import('.\/type.d.ts').Params} Params\n *\/\n\/** @type {{params: Params, responses: number[][], responseDurations: number[][]}} *\/\nconst myGlobalThis = window.top;\n\n\n\/**\n * One instance per document (iframe)\n *\/\nclass GlobalKeydownEventListener {\n  constructor() {\n    \/** @type {(key: string) -> void} *\/\n    this.callback = undefined;\n    this.acceptedKeys = [];\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleMessage = this.handleMessage.bind(this);\n    this.passKeydownToTopWindow = this.passKeydownToTopWindow.bind(this);\n  }\n  add() {\n    window.addEventListener('keydown', this.passKeydownToTopWindow);\n    window.top.addEventListener('keydown', this.handleKeyDown);\n    window.top.addEventListener('message', this.handleMessage);\n  }\n  remove() {\n    window.removeEventListener('keydown', this.passKeydownToTopWindow);\n    window.top.removeEventListener('keydown', this.handleKeyDown);\n    window.top.removeEventListener('message', this.handleMessage);\n  }\n  handleKeyDown(event) {\n    const normalizedKey = this.normalizeKey(event.key);\n    if (this.callback && this.acceptedKeys.includes(normalizedKey)) {\n      event.stopPropagation();\n      event.preventDefault();\n      this.callback && this.callback(normalizedKey);\n    }\n  }\n  handleMessage(event) {\n    if (event.data.type === 'iframe-keydown') {\n      this.callback && this.callback(event.data.key);\n    }\n  }\n  \/**\n   * Pass keydown event from iframe to top window. \n   * Otherwise, in Qualtrics Preview, top window cannot receive keydown event if focus is on iframe\n   *\/\n  passKeydownToTopWindow(event) {\n    const normalizedKey = this.normalizeKey(event.key);\n    if (this.callback && this.acceptedKeys.includes(normalizedKey)) {\n      event.stopPropagation();\n      event.preventDefault();\n      window.top.postMessage({\n        type: 'iframe-keydown',\n        key: normalizedKey,\n      });\n    }\n  }\n  normalizeKey(key) {\n    \/\/ Maybe we should use `code` instead of `key` in the future\n    if (key.length === 1) {\n      if (key >= '0' && key <= '9') return key;\n      if (key >= 'a' && key <= 'z') return key;\n      if (key === ' ') return 'Space';\n      if (key >= 'A' && key <= 'Z') return key.toLowerCase();\n    }\n    if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(key)) {\n      return key;\n    }\n    return null;\n  }\n}\n\n\/\/ Prepare input and output in myGlobalThis\nif (!myGlobalThis.params) {\n  alert('Sorry. Critical error occured in the survey webpage. Please restart survey or contact the survey conductor. Error message: \"SPT trial parameters not found.\"');\n}\nif (myGlobalThis.currentRound === undefined) {\n  myGlobalThis.currentRound = 0;\n}\nif (myGlobalThis.responses === undefined) {\n  myGlobalThis.responses = myGlobalThis.params.rounds.map(({ totalTrials }) => Array(totalTrials));\n}\nif (myGlobalThis.responseDurations === undefined) {\n  myGlobalThis.responseDurations = myGlobalThis.params.rounds.map(({ totalTrials }) => Array(totalTrials));\n}\n\nconst roundParams = myGlobalThis.params.rounds[myGlobalThis.currentRound];\nif (!roundParams) {\n  alert('Sorry. Critical error occured in the survey webpage. Please restart survey or contact the survey conductor. Error message: \"SPT round parameters not found for round #' + myGlobalThis.currentRound + '.\"');\n}\n\n\nconst { pools, totalTrials, timeline } = roundParams;\n\nconst keyboardListener = new GlobalKeydownEventListener();\nkeyboardListener.acceptedKeys = myGlobalThis.params.acceptedKeys;\n\nQualtrics.SurveyEngine.addOnload(function () {\n\n  const thisQultricsQuestion = this;\n  this.hideNextButton();\n  this.hidePreviousButton();\n  this.hideChoices();\n\n  const displayController = DisplayController(thisQultricsQuestion.questionContainer);\n  keyboardListener.add();\n\n  const { currentRound } = myGlobalThis;\n\n  \/\/ Trial state machine:\n  \/\/ -> display stimuli[] -> retardation -> !!!await keyboard!!! --@accepted-> retention -> $\n  \/\/                                                             --@timeout?--------------> $ \n  function runTrial(tid) {\n    \/\/ The shared-variable communication between keyboard thread and timeout thread\n    \/\/ When one thread is resolved, set isAwaiting=false to disable the other thread\n    let isAwaiting = false;\n    let awaitKeyboardStartTime;\n\n    console.debug('runTrial', currentRound, tid);\n\n    for (const poolIndex of pools.keys()) {\n      const stimuliStartTime = sum(timeline.durationsAndIntervals.slice(0, poolIndex).flat());\n      setTimeout(() => {\n        displayController.display(getContent(poolIndex, tid));\n      }, stimuliStartTime);\n      if (poolIndex !== pools.length - 1) {\n        const stimuliDuration = timeline.durationsAndIntervals[poolIndex][0];\n        setTimeout(() => {\n          displayController.clear();\n        }, stimuliStartTime + stimuliDuration);\n      } else {\n        \/\/ start awaiting keyboard\n        setTimeout(() => {\n          isAwaiting = true;\n          keyboardListener.callback = keyboardListenerCallback;\n          awaitKeyboardStartTime = performance.now();\n        }, stimuliStartTime + (timeline.delayBeforeKeyboard || 0));\n        \/\/ auto proceed\n        if (timeline.autoProceedTimeout !== null && timeline.autoProceedTimeout >= 0) {\n          setTimeout(() => {\n            if (isAwaiting) {\n              isAwaiting = false;\n              keyboardListener.callback = undefined;\n              nextTrial(tid + 1);\n            }\n          }, stimuliStartTime + timeline.autoProceedTimeout);\n        }\n      }\n    }\n\n    function keyboardListenerCallback(key) {\n      if (isAwaiting) {\n        isAwaiting = false;\n        keyboardListener.callback = undefined;\n        const duration = Math.floor(performance.now() - awaitKeyboardStartTime);\n        myGlobalThis.responses[currentRound][tid] = key;\n        myGlobalThis.responseDurations[currentRound][tid] = duration;\n        setTimeout(() => {\n          nextTrial(tid + 1);\n        }, timeline.delayAfterKeyboard); \/\/ NaN|undef|negative behaves like 0 \n      }\n    }\n  }\n\n  function nextTrial(newTid) {\n    exportResponse();\n    myGlobalThis.currentTrial = newTid;\n    if (myGlobalThis.currentTrial >= totalTrials) {\n      myGlobalThis.currentRound = currentRound + 1;\n      myGlobalThis.currentTrial = undefined;\n      thisQultricsQuestion.clickNextButton();\n    } else {\n      runTrial(newTid);\n    }\n  }\n\n  nextTrial(0);\n});\n\n\nQualtrics.SurveyEngine.addOnUnload(function () {\n  keyboardListener.remove();\n})\n\n\nfunction exportResponse() {\n  const { responses, responseDurations } = myGlobalThis;\n  _set('sptResponses', responses.map(round => round.join(',')).join(';'));  \/\/ empty array item will be empty string\n  _set('sptResponsesArray', JSON.stringify(responses));\n  _set('sptResponseDurations', responseDurations.map(round => round.join(',')).join(';'));\n  _set('sptResponseDurationsArray', JSON.stringify(responseDurations));\n}\n\n\n\/**\n * Get content from stimuli or preload\n * @param {number} poolIndex \n * @param {number} trialIndex \n * @returns {{type: 'image'|'text', content: string}|null}\n *\/\nfunction getContent(poolIndex, trialIndex) {\n  const itemIndex = pools[poolIndex].shuffledIndexes[trialIndex];\n  const item = pools[poolIndex].items[itemIndex];\n  if (item === undefined) {\n    return null;\n  }\n  const { type, content } = item;\n  const preload = type === 'image' && myGlobalThis.preload[content];\n  return { type, content: preload || content }; \/\/ better use ?? here\n}\n\n\nfunction DisplayController(questionContainer) {\n  \/** @type { HTMLImageElement } *\/\n  const imageEl = questionContainer.querySelector('#spt-trial-image');\n  \/** @type { HTMLParagraphElement } *\/\n  const textEl = questionContainer.querySelector('#spt-trial-text');\n  \/**\n   * @param {{type: 'image'|'text', content: string}|null} stimuliItem\n   *\/\n  function display(stimuliItem) {\n    if (stimuliItem === null) {\n      clear();\n    } else if (stimuliItem.type === 'text') {\n      textEl.style.visibility = null;\n      textEl.innerHTML = stimuliItem.content;\n      imageEl.style.visibility = 'hidden';\n      imageEl.src = null;\n    } else {\n      textEl.style.visibility = 'hidden';\n      textEl.innerHTML = '';\n      imageEl.style.visibility = null;\n      imageEl.src = stimuliItem.content;\n    }\n  }\n  function clear() {\n    textEl.style.visibility = 'hidden';;\n    textEl.innerHTML = '';\n    imageEl.style.visibility = 'hidden';\n    imageEl.src = null;\n  }\n  return { display, clear };\n}\n\n\n\nfunction sum(array) {\n  return array.reduce((a, b) => a + b, 0);\n}\n\nfunction _set(name, value) {\n  console.debug('[AMP] set ' + name + ' = ' + value);\n  Qualtrics.SurveyEngine.setEmbeddedData(name, value);\n}",
        "DataVisibility": {
          "Private": false,
          "Hidden": false
        }
      }
    },
    {
      "SurveyID": "SV_dnAkDKOddKsPTpQ",
      "Element": "QG",
      "PrimaryAttribute": "QG_FH8Cdf0L5gg9uBa",
      "SecondaryAttribute": "Default Quota Group",
      "TertiaryAttribute": null,
      "Payload": {
        "ID": "QG_FH8Cdf0L5gg9uBa",
        "Name": "Default Quota Group",
        "Selected": true,
        "MultipleMatch": "PlaceInAll",
        "Public": false,
        "Quotas": []
      }
    },
    {
      "SurveyID": "SV_dnAkDKOddKsPTpQ",
      "Element": "RS",
      "PrimaryAttribute": "RS_6zXdxkXXWoWLKL4",
      "SecondaryAttribute": "Default Response Set",
      "TertiaryAttribute": null,
      "Payload": null
    },
    {
      "SurveyID": "SV_dnAkDKOddKsPTpQ",
      "Element": "SQ",
      "PrimaryAttribute": "QID1",
      "SecondaryAttribute": "This loads parameters.",
      "TertiaryAttribute": null,
      "Payload": {
        "QuestionText": "This loads parameters.",
        "DefaultChoices": false,
        "DataExportTag": "LoadParameters",
        "QuestionID": "QID1",
        "QuestionType": "DB",
        "Selector": "TB",
        "DataVisibility": {
          "Private": false,
          "Hidden": false
        },
        "Configuration": {
          "QuestionDescriptionOption": "UseText"
        },
        "QuestionDescription": "This loads parameters.",
        "ChoiceOrder": [],
        "Validation": {
          "Settings": {
            "Type": "None"
          }
        },
        "GradingData": [],
        "Language": [],
        "NextChoiceId": 4,
        "NextAnswerId": 1,
        "QuestionJS": "\"use strict\";\n\nfunction _typeof(obj) { \"@babel\/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || \/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar myGlobalThis = window.top;\nmyGlobalThis.qs = Qualtrics.SurveyEngine; \/\/ for debug\n\nfunction main() {\n  var params = loadParams();\n  myGlobalThis.params = params;\n  myGlobalThis.currentRound = 0;\n  console.log('[AMP Gen] Loaded parameters', myGlobalThis.params);\n  applyPrime(params);\n  applyShuffle(params);\n  applyPreload(params);\n}\nQualtrics.SurveyEngine.addOnload(main);\n\n\/**\n * @typedef {import('.\/type.d.ts').StimuliItem} StimuliItem\n * @typedef {import('.\/type.d.ts').StimuliPoolConfig} StimuliPoolConfig\n * @typedef {import('.\/type.d.ts').Timeline} Timeline\n * @typedef {import('.\/type.d.ts').StimuliRound} StimuliRound\n\/\/  * @typedef {import('.\/type.d.ts').StimuliItemLocator} StimuliItemLocator\n * @typedef {import('.\/type.d.ts').StimuliItemRef} StimuliItemRef\n * @typedef {import('.\/type.d.ts').StimuliPrimeItem} StimuliPrimeItem\n * @typedef {import('.\/type.d.ts').Params} Params\n *\/\n\n\/**\n * @returns {Params}\n *\/\nfunction loadParams() {\n  try {\n    var _$split, _ref;\n    var stimuliItems = JSON.parse(_('stimuliItems'));\n    var timeline = JSON.parse(_('timeline'));\n    var totalRounds = parseInt(_('totalRounds') || 1);\n    return {\n      rounds: Array(totalRounds).fill().map(function () {\n        return _objectSpread(_objectSpread({}, deepClone(stimuliItems[0])), {}, {\n          timeline: timeline\n        });\n      }),\n      \/\/ for now, use same timeline and stimuli for all rounds\n      totalRounds: totalRounds,\n      primes: JSON.parse(_('primes')),\n      acceptedKeys: (_$split = (_ref = _('acceptedKeys')) === null || _ref === void 0 ? void 0 : _ref.split(',')) !== null && _$split !== void 0 ? _$split : []\n    };\n  } catch (e) {\n    alert(\"Error when loading parameters. Error message:\\n \".concat(e));\n  }\n}\n\n\/**\n * @param {Params} params \n *\/\nfunction applyShuffle(params) {\n  console.debug('applyShuffle');\n  var shuffleResult = params.rounds.map(function (round) {\n    return round.pools.map(function (pool) {\n      pool.shuffledIndexes = shuffledIndexes(pool);\n      return pool.shuffledIndexes.map(function (x) {\n        return x + 1;\n      }).join(','); \/\/ to 1-based\n    }).join(';');\n  }).join('\/');\n  _set('shuffleResult', shuffleResult);\n}\n\n\/**\n * @param {StimuliPoolConfig} pool  \n * @returns {number[]}\n *\/\nfunction shuffledIndexes(pool) {\n  var items = pool.items,\n    shuffle = pool.shuffle;\n  var indexes = getIndexesRepresentation(items);\n  if (shuffle >= 1) {\n    shuffleWithMaxRepeat(indexes, shuffle);\n  } else if (shuffle) {\n    shuffleArray(indexes);\n  }\n  return indexes;\n\n  \/**\n   * Represent pool with indexes rather than the actual content, rotationally\n   * e.g. [{count:2},{count:3},{count:1}] -> [0,1,2,0,1,1]\n   * @param {{count: number}[]} items \n   * @returns {number[]}\n   *\/\n  function getIndexesRepresentation(items) {\n    var indexes = [];\n    var counts = items.map(function (item, index) {\n      return [index, item.count];\n    });\n    while (true) {\n      var remainingIndexes = counts.filter(function (_ref2) {\n        var _ref3 = _slicedToArray(_ref2, 2),\n          index = _ref3[0],\n          count = _ref3[1];\n        return count > 0;\n      }).map(function (_ref4) {\n        var _ref5 = _slicedToArray(_ref4, 2),\n          index = _ref5[0],\n          count = _ref5[1];\n        return index;\n      });\n      if (remainingIndexes.length) {\n        indexes.push.apply(indexes, _toConsumableArray(remainingIndexes));\n        remainingIndexes.map(function (index) {\n          return counts[index][1]--;\n        });\n      } else {\n        break;\n      }\n    }\n    return indexes;\n  }\n\n  \/\/ Shuffles \"array\" in situ\n  function shuffleArray(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  }\n\n  \/\/ Shuffles \"array\" in situ, with promise that no item will repeat \"maxRepeat\" times consecutively\n  function shuffleWithMaxRepeat(array, maxRepeat) {\n    var MAX_TRY = 100; \/\/ if cannot satisfy after too many tries, stop shuffling and ignore maxRepeat\n    var validate = function validate() {\n      var repeatItem, repeatTimes;\n      var _iterator = _createForOfIteratorHelper(array),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var i = _step.value;\n          if (i === repeatItem) {\n            if (repeatTimes === maxRepeat) {\n              return false;\n            } else {\n              repeatTimes++;\n            }\n          } else {\n            repeatItem = i;\n            repeatTimes = 1;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return true;\n    };\n    for (var i = 0; i < MAX_TRY; i++) {\n      shuffleArray(array);\n      if (validate()) return;\n    }\n  }\n}\n\n\/**\n * @deprecated\n * @param {number[]} indexes \n * @param {number} roundIndex\n * @param {number} poolIndex\n * @return {void}\n *\/\nfunction outputShuffle(indexes, roundIndex, poolIndex) {\n  var shuffleResult = indexes.map(function (i) {\n    return i + 1;\n  }).join(',');\n  var shuffleResultName = \"round_\".concat(roundIndex + 1, \"_pool_\").concat(poolIndex + 1, \"_shuffle_result\");\n  _set(shuffleResultName, shuffleResult);\n}\n\n\/**\n * \n * @param {Params} params\n *\/\nfunction applyPrime(params) {\n  var primeResult = findPrime(params.primes, params.rounds);\n  applyAndOutputPrime(params, primeResult);\n}\n\n\/** \n * @typedef {Record.<string, number|null>} PrimeResult \n * primeName -> stimulusItemIndex (0-based); \n * null means not found;\n *\/\n\/**\n * Get locators for primes\n * @param {StimuliPrimeItem[]} primes\n * @param {StimuliRound[]} rounds\n * @returns {PrimeResult}\n *\/\nfunction findPrime(primes, rounds) {\n  if (primes === null) {\n    return {};\n  }\n  \/** @type {PrimeResult} *\/\n  var primeResult = {};\n  var _iterator2 = _createForOfIteratorHelper(primes),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _step2$value = _step2.value,\n        name = _step2$value.name,\n        pool = _step2$value.pool,\n        include = _step2$value.include,\n        exclude = _step2$value.exclude;\n      \/\/ Babel has issue: after Set.delete() cannot transform Set to Array\n      var includeExpanded = include !== null && include !== void 0 && include.length ? include : rounds[0].pools[pool - 1].items.map(function (_, itemIndex) {\n        return itemIndex + 1;\n      }); \/\/ no item -> all in pool (for now, all rounds share same stimuli)\n      var includeIndexes = getItemLocators(includeExpanded, primeResult);\n      var excludeIndexes = getItemLocators(exclude !== null && exclude !== void 0 ? exclude : [], primeResult);\n      var resolvedStimuliIndexes = includeExclude(includeIndexes, excludeIndexes);\n      var result = randomChoice(resolvedStimuliIndexes);\n      primeResult[name] = result;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  console.debug('primeResult', primeResult);\n  return primeResult;\n\n  \/**\n   * @param {StimuliItemRef[]} itemRefs\n   * @param {PrimeResult} primeResult \n   * @returns {number[]}\n   *\/\n  function getItemLocators(itemRefs, primeResult) {\n    \/\/ (string (prime name) | itemIndexes)[]\n    return itemRefs.map(function (ref) {\n      if (typeof ref === 'string') {\n        var _primeResult$ref;\n        return (_primeResult$ref = primeResult[ref]) !== null && _primeResult$ref !== void 0 ? _primeResult$ref : null;\n      } else {\n        return ref - 1;\n      }\n    }).filter(function (x) {\n      return x !== null;\n    });\n  }\n  function includeExclude(include, exclude) {\n    \/\/ return include.filter(inc => !exclude.some(exc => (\n    \/\/   inc[0] === exc[0] && inc[1] === exc[1] && inc[2] === exc[2]\n    \/\/ )));\n    return include.filter(function (inc) {\n      return !exclude.includes(inc);\n    });\n  }\n  function randomChoice(list) {\n    var _list$Math$floor;\n    return (_list$Math$floor = list[Math.floor(Math.random() * list.length)]) !== null && _list$Math$floor !== void 0 ? _list$Math$floor : null;\n  }\n}\n\n\/**\n * \n * @param {Params} params\n * @param {PrimeResult} primeResult\n *\/\nfunction applyAndOutputPrime(params, primeResult) {\n  var primeResultString = Object.entries(primeResult).map(function (_ref6) {\n    var _ref7 = _slicedToArray(_ref6, 2),\n      name = _ref7[0],\n      result = _ref7[1];\n    return \"\".concat(name, \"=\").concat(result + 1);\n  }).join(';');\n  _set('primeResult', primeResultString);\n  _set('primeResultJson', JSON.stringify(mapObject(primeResult, function (i) {\n    return i + 1;\n  })));\n  var _loop = function _loop() {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2),\n      primeName = _Object$entries$_i[0],\n      itemIndex = _Object$entries$_i[1];\n    if (itemIndex !== null) {\n      var prime = params.primes.find(function (p) {\n        return p.name === primeName;\n      });\n      var poolIndex = (prime === null || prime === void 0 ? void 0 : prime.pool) - 1;\n      if (typeof (prime === null || prime === void 0 ? void 0 : prime.overrideCount) === 'number') {\n        params.rounds.forEach(function (round) {\n          return round.pools[poolIndex].items[itemIndex].count = prime.overrideCount;\n        });\n      }\n      if (Array.isArray(prime === null || prime === void 0 ? void 0 : prime.overrideCount)) {\n        prime.overrideCount.forEach(function (roundOverrideCount, roundIndex) {\n          if (typeof roundOverrideCount === 'number') {\n            var stimuliItem = params.rounds[roundIndex].pools[poolIndex].items[itemIndex];\n            stimuliItem.count = roundOverrideCount;\n          }\n        });\n      }\n\n      \/\/ _set(`prime_${primeName}_round_index`, roundIndex + 1);\n      \/\/ _set(`prime_${primeName}_pool_index`, poolIndex + 1);\n      var stimuliItem0 = params.rounds[0].pools[poolIndex].items[itemIndex];\n      _set(\"prime_\".concat(primeName, \"_item_index\"), itemIndex + 1);\n      _set(\"prime_\".concat(primeName, \"_type\"), stimuliItem0.type);\n      _set(\"prime_\".concat(primeName, \"_content\"), stimuliItem0.content);\n      \/\/ _set(`prime_${primeName}_count`, stimuliItem.count);\n    } else {\n      _set(\"prime_\".concat(primeName, \"_item_index\"), 'null');\n      _set(\"prime_\".concat(primeName, \"_type\"), 'null');\n      _set(\"prime_\".concat(primeName, \"_content\"), 'null');\n    }\n  };\n  for (var _i2 = 0, _Object$entries = Object.entries(primeResult); _i2 < _Object$entries.length; _i2++) {\n    _loop();\n  }\n}\n\n\/**\n * Preload images. Return a copy of the array but the items will be replaced with preloaded blobs asynchronously.\n * Preloaded images are stored in object `myGlobalThis.preload`\n * (We cannot directly use http cache to preload image, because Qualtrics sets the cache to expire in 60s (`cache-control: max-age=60`))\n * (Thus, use blobs.)\n * @param {Params} params\n * @returns {void}\n *\/\nfunction applyPreload(params) {\n  if (myGlobalThis.preload === undefined) {\n    myGlobalThis.preload = {};\n  }\n  var imageContents = params.rounds.flatMap(function (_ref8) {\n    var pools = _ref8.pools;\n    return pools.flatMap(function (_ref9) {\n      var items = _ref9.items;\n      return items.map(function (item) {\n        return item.type === 'image' ? item.content : null;\n      }).filter(function (x) {\n        return x !== null;\n      });\n    });\n  });\n  var _iterator3 = _createForOfIteratorHelper(imageContents),\n    _step3;\n  try {\n    var _loop2 = function _loop2() {\n      var content = _step3.value;\n      \/\/ (even if already preloaded, do not skip; otherwise blob expire when restart survey in preview)\n      \/\/ if content starts with 'http(s):\/\/'\n      \/\/ if (\/^https?:\\\/\\\/\/.test(content)) {\n      createImageBlob(content, function (e, blob) {\n        if (blob) {\n          console.debug('Preload blob created:', blob);\n          myGlobalThis.preload[content] = blob;\n        } else {\n          console.debug('Preload blob error:', e);\n        }\n      });\n      \/\/ } else {\n      \/\/   console.debug('Preload skipped for non-url content:', content)\n      \/\/ }\n    };\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      _loop2();\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  ;\n  function createImageBlob(url, callback) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'blob';\n    xhr.onload = function () {\n      if (this.status === 200 || this.status === 304) {\n        callback(null, URL.createObjectURL(this.response));\n      } else {\n        callback(new Error('Request failed with status ' + this.status));\n      }\n    };\n    xhr.onerror = function () {\n      callback(new Error('Network error'));\n    };\n    xhr.send();\n  }\n}\n\n\/**\n * @param {string} name \n * @returns {string|null}\n *\/\nfunction _(name) {\n  return Qualtrics.SurveyEngine.getEmbeddedData(name);\n}\nfunction _set(name, value) {\n  console.log(\"[AMP] set \".concat(name, \" = \").concat(value));\n  Qualtrics.SurveyEngine.setEmbeddedData(name, value);\n}\n\n\/**\n * @template K, V, W\n * @param {Record.<K, V>} obj \n * @param {function(V): W} mapper \n * @returns {Record.<K, W>}\n *\/\nfunction mapObject(obj, mapper) {\n  return Object.fromEntries(Object.entries(obj).map(function (_ref10) {\n    var _ref11 = _slicedToArray(_ref10, 2),\n      key = _ref11[0],\n      value = _ref11[1];\n    return [key, mapper(value)];\n  }));\n}\nfunction range(n) {\n  var result = [];\n  for (var i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result;\n}\nfunction deepClone(item) {\n  if (Array.isArray(item)) {\n    return item.map(deepClone);\n  }\n  if (item instanceof Object) {\n    var clone = {};\n    Object.keys(item).forEach(function (key) {\n      clone[key] = deepClone(item[key]);\n    });\n    return clone;\n  }\n  return item;\n}"
      }
    }
  ]
}